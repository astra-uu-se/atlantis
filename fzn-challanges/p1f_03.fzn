predicate array_var_int_element_offset(var int: idx,array [int] of var int: x,var int: c,int: offset);
predicate fzn_all_different_int(array [int] of var int: x);
predicate circuit_no_offset(array [int] of var int: x);
array [1..2] of int: X_INTRODUCED_64_ = [1,-1];
array [1..4] of int: X_INTRODUCED_78_ = [1,2,3,-1];
var 7..15: objective:: computed_domain:: output_var:: is_defined_var;
var 2..3: X_INTRODUCED_26_ ::var_is_introduced :: is_defined_var;
var {1,3}: X_INTRODUCED_27_ ::var_is_introduced ;
var 1..2: X_INTRODUCED_28_ ::var_is_introduced ;
var 2..3: X_INTRODUCED_37_ ::var_is_introduced ;
var {1,3}: X_INTRODUCED_38_ ::var_is_introduced ;
var 1..2: X_INTRODUCED_39_ ::var_is_introduced ;
var 1..2: X_INTRODUCED_50_ ::var_is_introduced ;
var 1..3: X_INTRODUCED_53_ ::var_is_introduced :: is_defined_var;
var 1..2: X_INTRODUCED_54_ ::var_is_introduced :: is_defined_var;
var 1..2: X_INTRODUCED_55_ ::var_is_introduced ;
var 1..2: X_INTRODUCED_57_ ::var_is_introduced ;
var bool: X_INTRODUCED_61_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_62_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_66_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_68_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_69_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_70_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_71_ ::var_is_introduced :: is_defined_var;
var bool: X_INTRODUCED_72_ ::var_is_introduced :: is_defined_var;
array [1..6] of var int: X_INTRODUCED_16_:: output_array([1..6]) = [X_INTRODUCED_26_,X_INTRODUCED_27_,X_INTRODUCED_28_,X_INTRODUCED_37_,X_INTRODUCED_38_,X_INTRODUCED_39_];
array [1..3] of var int: X_INTRODUCED_24_ ::var_is_introduced  = [X_INTRODUCED_26_,X_INTRODUCED_27_,X_INTRODUCED_28_];
array [1..3] of var int: X_INTRODUCED_25_ ::var_is_introduced  = [X_INTRODUCED_26_,X_INTRODUCED_27_,X_INTRODUCED_28_];
array [1..3] of var int: X_INTRODUCED_35_ ::var_is_introduced  = [X_INTRODUCED_37_,X_INTRODUCED_38_,X_INTRODUCED_39_];
array [1..3] of var int: X_INTRODUCED_36_ ::var_is_introduced  = [X_INTRODUCED_37_,X_INTRODUCED_38_,X_INTRODUCED_39_];
array [1..2] of var int: X_INTRODUCED_46_ ::var_is_introduced  = [X_INTRODUCED_26_,X_INTRODUCED_37_];
array [1..2] of var int: X_INTRODUCED_47_ ::var_is_introduced  = [X_INTRODUCED_27_,X_INTRODUCED_38_];
array [1..2] of var int: X_INTRODUCED_48_ ::var_is_introduced  = [X_INTRODUCED_28_,X_INTRODUCED_39_];
constraint array_var_int_element_offset(X_INTRODUCED_26_,X_INTRODUCED_24_,1,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_27_,X_INTRODUCED_24_,2,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_28_,X_INTRODUCED_24_,3,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_26_,X_INTRODUCED_25_,1,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_27_,X_INTRODUCED_25_,2,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_28_,X_INTRODUCED_25_,3,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_37_,X_INTRODUCED_35_,1,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_38_,X_INTRODUCED_35_,2,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_39_,X_INTRODUCED_35_,3,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_37_,X_INTRODUCED_36_,1,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_38_,X_INTRODUCED_36_,2,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_39_,X_INTRODUCED_36_,3,1):: domain;
constraint fzn_all_different_int(X_INTRODUCED_46_):: domain;
constraint fzn_all_different_int(X_INTRODUCED_47_):: domain;
constraint fzn_all_different_int(X_INTRODUCED_48_):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_50_,X_INTRODUCED_46_,X_INTRODUCED_26_,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_55_,X_INTRODUCED_47_,X_INTRODUCED_53_,1):: domain;
constraint array_var_int_element_offset(X_INTRODUCED_57_,X_INTRODUCED_48_,X_INTRODUCED_54_,1):: domain;
constraint circuit_no_offset([X_INTRODUCED_26_,X_INTRODUCED_53_,X_INTRODUCED_54_]):: domain;
constraint int_lin_eq(X_INTRODUCED_78_,[X_INTRODUCED_26_,X_INTRODUCED_27_,X_INTRODUCED_28_,objective],0):: defines_var(objective);
constraint array_bool_and([X_INTRODUCED_68_,X_INTRODUCED_70_],X_INTRODUCED_61_):: defines_var(X_INTRODUCED_61_);
constraint array_bool_and([X_INTRODUCED_71_,X_INTRODUCED_72_],X_INTRODUCED_62_):: defines_var(X_INTRODUCED_62_);
constraint int_lin_le(X_INTRODUCED_64_,[X_INTRODUCED_26_,X_INTRODUCED_37_],0);
constraint int_lin_le_reif(X_INTRODUCED_64_,[X_INTRODUCED_26_,X_INTRODUCED_37_],-1,X_INTRODUCED_66_):: defines_var(X_INTRODUCED_66_);
constraint bool_clause([X_INTRODUCED_61_,X_INTRODUCED_66_],[]);
constraint int_lin_le_reif(X_INTRODUCED_64_,[X_INTRODUCED_27_,X_INTRODUCED_38_],0,X_INTRODUCED_68_):: defines_var(X_INTRODUCED_68_);
constraint int_lin_le_reif(X_INTRODUCED_64_,[X_INTRODUCED_27_,X_INTRODUCED_38_],-1,X_INTRODUCED_69_):: defines_var(X_INTRODUCED_69_);
constraint bool_clause_reif([X_INTRODUCED_62_,X_INTRODUCED_69_],[],X_INTRODUCED_70_):: defines_var(X_INTRODUCED_70_);
constraint int_lin_le_reif(X_INTRODUCED_64_,[X_INTRODUCED_28_,X_INTRODUCED_39_],0,X_INTRODUCED_71_):: defines_var(X_INTRODUCED_71_);
constraint int_lin_le_reif(X_INTRODUCED_64_,[X_INTRODUCED_28_,X_INTRODUCED_39_],-1,X_INTRODUCED_72_):: defines_var(X_INTRODUCED_72_);
solve :: int_search([X_INTRODUCED_26_,X_INTRODUCED_27_,X_INTRODUCED_28_,X_INTRODUCED_37_,X_INTRODUCED_38_,X_INTRODUCED_39_],input_order,indomain_min,complete) minimize objective;
