name: CMake

on: [push]

env:
  BUILD_TYPE: Release
  DEPS_DIR: ${{ github.workspace }}/deps
  CXX_FLAGS: "-std=c++17 -Wall -pedantic -Werror -Wno-variadic-macros -Wno-long-long -Wno-shadow ${ENV_CXX_FLAGS}"
  RUN_TESTS: true
  RUN_BENCHMARKS: true
  SLACK_WEBHOOK_BUILD: ${{ secrets.SLACK_WEBHOOK_BUILD }}
  SLACK_WEBHOOK_BENCH: ${{ secrets.SLACK_WEBHOOK_BENCH }}
  CMAKE_OPTIONS: "${env.CMAKE_OPTIONS} ${env.ENV_CMAKE_OPTIONS}"
  GTEST_FLAGS: -DBUILD_TESTS:BOOL=ON -DBUILD_BENCHMARKS:BOOL=OFF -DCMAKE_BUILD_TYPE=Debug
  GBENCH_FLAGS: -DBUILD_TESTS:BOOL=OFF -BENCHMARK_ENABLE_TESTING:BOOL=OFF -DBUILD_BENCHMARKS:BOOL=ON -DCMAKE_BUILD_TYPE=Release

jobs:
  Test:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install
      shell: bash
      run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; sudo apt-get install gcc-8 g++-8 python3; sudo apt-get update

    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake ${{ env.CMAKE_OPTIONS }} ${{ env.GTEST_FLAGS }} -DCMAKE_CXX_FLAGS=${{ env.CXX_FLAGS }}  ..

    - name: Test
      working-directory: ${{ github.workspace }}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest
    
    - uses: act10ns/slack@v1
      with:
        status: ${{ job.status }}
        steps: ${{ toJson(steps) }}
        channel: '#build'
      if: always()
  
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    needs: [Test]
    if:
      contains('refs/heads/develop refs/heads/master', github.ref)
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Install
      shell: bash
      run: sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test; sudo apt-get install gcc-8 g++-8 python3; sudo apt-get update -qq

    - name: Create Build Environment
      run: cmake -E make_directory ${{ github.workspace }}/build

    - name: Build
      working-directory: ${{ github.workspace }}/build
      shell: bash
      run: cmake ${{ env.CMAKE_OPTIONS }} ${{ env.GBENCH_FLAGS }} -DCMAKE_CXX_FLAGS=${{ env.CXX_FLAGS}} ..

    - name: Benchmark
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: slack-benchmark.sh;