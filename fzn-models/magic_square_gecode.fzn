predicate fzn_all_different_int(array [int] of var int: x);
array [1..3] of int: X_INTRODUCED_30_ = [1,1,1];
var 1..8: X_INTRODUCED_18_;
var 1..9: X_INTRODUCED_19_;
var 2..9: X_INTRODUCED_20_;
var 1..9: X_INTRODUCED_21_;
var 1..9: X_INTRODUCED_22_;
var 1..9: X_INTRODUCED_23_;
var 2..9: X_INTRODUCED_24_;
var 1..9: X_INTRODUCED_25_;
var 2..9: X_INTRODUCED_26_;
array [1..9] of var int: X_INTRODUCED_17_:: output_array([1..9]) = [X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_,X_INTRODUCED_21_,X_INTRODUCED_22_,X_INTRODUCED_23_,X_INTRODUCED_24_,X_INTRODUCED_25_,X_INTRODUCED_26_];
array [1..9] of var int: X_INTRODUCED_27_ ::var_is_introduced  = [X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_,X_INTRODUCED_21_,X_INTRODUCED_22_,X_INTRODUCED_23_,X_INTRODUCED_24_,X_INTRODUCED_25_,X_INTRODUCED_26_];
array [1..4] of var int: X_INTRODUCED_43_ ::var_is_introduced  = [X_INTRODUCED_18_,X_INTRODUCED_20_,X_INTRODUCED_24_,X_INTRODUCED_26_];
constraint fzn_all_different_int(X_INTRODUCED_27_);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_18_,X_INTRODUCED_19_,X_INTRODUCED_20_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_21_,X_INTRODUCED_22_,X_INTRODUCED_23_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_24_,X_INTRODUCED_25_,X_INTRODUCED_26_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_18_,X_INTRODUCED_21_,X_INTRODUCED_24_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_19_,X_INTRODUCED_22_,X_INTRODUCED_25_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_20_,X_INTRODUCED_23_,X_INTRODUCED_26_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_18_,X_INTRODUCED_22_,X_INTRODUCED_26_],15);
constraint int_lin_eq(X_INTRODUCED_30_,[X_INTRODUCED_24_,X_INTRODUCED_22_,X_INTRODUCED_20_],15);
solve :: seq_search([int_search(X_INTRODUCED_43_,input_order,indomain_split,complete),int_search(X_INTRODUCED_17_,occurrence,indomain_split,complete)]) satisfy;
