predicate fzn_all_different_int(array [int] of var int: x);
int: X_INTRODUCED_4_ = 5;
array [1..3] of int: X_INTRODUCED_12_ = [1,1,1];
array [1..2] of int: X_INTRODUCED_15_ = [1,1];
var {2,4,6,8}: X_INTRODUCED_0_;
var {1,2,3,4,6,7,8,9}: X_INTRODUCED_1_;
var {2,4,6,8}: X_INTRODUCED_2_;
var {1,2,3,4,6,7,8,9}: X_INTRODUCED_3_;
var {1,2,3,4,7,9}: X_INTRODUCED_5_;
var {2,3,4,6,8}: X_INTRODUCED_6_;
var {1,2,3,4,7,9}: X_INTRODUCED_7_;
var {2,3,4,6,8}: X_INTRODUCED_8_;
array [1..9] of var int: Magic:: output_array([1..3,1..3]) = [X_INTRODUCED_0_,X_INTRODUCED_1_,X_INTRODUCED_2_,X_INTRODUCED_3_,5,X_INTRODUCED_5_,X_INTRODUCED_6_,X_INTRODUCED_7_,X_INTRODUCED_8_];
array [1..9] of var int: X_INTRODUCED_9_ ::var_is_introduced  = [X_INTRODUCED_0_,X_INTRODUCED_1_,X_INTRODUCED_2_,X_INTRODUCED_3_,5,X_INTRODUCED_5_,X_INTRODUCED_6_,X_INTRODUCED_7_,X_INTRODUCED_8_];
array [1..4] of var int: X_INTRODUCED_26_ ::var_is_introduced  = [X_INTRODUCED_0_,X_INTRODUCED_2_,X_INTRODUCED_6_,X_INTRODUCED_8_];
constraint fzn_all_different_int(X_INTRODUCED_9_);
constraint int_lin_eq(X_INTRODUCED_12_,[X_INTRODUCED_0_,X_INTRODUCED_1_,X_INTRODUCED_2_],15);
constraint int_lin_eq(X_INTRODUCED_15_,[X_INTRODUCED_3_,X_INTRODUCED_5_],10);
constraint int_lin_eq(X_INTRODUCED_12_,[X_INTRODUCED_6_,X_INTRODUCED_7_,X_INTRODUCED_8_],15);
constraint int_lin_eq(X_INTRODUCED_12_,[X_INTRODUCED_0_,X_INTRODUCED_3_,X_INTRODUCED_6_],15);
constraint int_lin_eq(X_INTRODUCED_15_,[X_INTRODUCED_1_,X_INTRODUCED_7_],10);
constraint int_lin_eq(X_INTRODUCED_12_,[X_INTRODUCED_2_,X_INTRODUCED_5_,X_INTRODUCED_8_],15);
constraint int_lin_eq(X_INTRODUCED_15_,[X_INTRODUCED_0_,X_INTRODUCED_8_],10);
constraint int_lin_eq(X_INTRODUCED_15_,[X_INTRODUCED_6_,X_INTRODUCED_2_],10);
solve :: seq_search([int_search(X_INTRODUCED_26_,input_order,indomain_split,complete),int_search(Magic,occurrence,indomain_split,complete)]) satisfy;
